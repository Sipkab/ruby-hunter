trigger:
- master

resources:
  repositories:
  - repository: repo_saker_windows
    type: github
    name: 'sakerbuild/saker.windows'
    endpoint: Sipkab
  - repository: repo_saker_apple
    type: github
    name: 'sakerbuild/saker.apple'
    endpoint: Sipkab
  - repository: repo_saker_android
    type: github
    name: 'sakerbuild/saker.android'
    endpoint: Sipkab
  - repository: repo_saker_msvc
    type: github
    name: 'sakerbuild/saker.msvc'
    endpoint: Sipkab
    ref: refs/heads/dep-saker.windows
    
jobs:
- job:
  strategy:
    matrix:
      win32:
        imageName: 'windows-latest'
        ci_target: 'win32'
      win32_steam:
        imageName: 'windows-latest'
        ci_target: 'win32_steam'
      winstore:
        imageName: 'windows-latest'
        ci_target: 'winstore'
      android_win:
        imageName: 'windows-latest'
        ci_target: 'android'
      android_mac:
        imageName: 'macos-latest'
        ci_target: 'android'
      macosx:
        imageName: 'macos-latest'
        ci_target: 'macosx'
      macosx_steam:
        imageName: 'macos-latest'
        ci_target: 'macosx_steam'
      ios:
        imageName: 'macos-latest'
        ci_target: 'ios'
      android_ubuntu:
        imageName: 'ubuntu-latest'
        ci_target: 'android'
      server_linux:
        imageName: 'ubuntu-latest'
        ci_target: 'server_linux'
  pool:
    vmImage: $(imageName)
  steps:
  - checkout: self
    path: s/ruby-hunter
  - checkout: repo_saker_windows
    path: s/saker.windows
  - checkout: repo_saker_apple
    path: s/saker.apple
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Darwin' ))
  - checkout: repo_saker_android
    path: s/saker.android
  - checkout: repo_saker_msvc
    path: s/saker.msvc
    
  - script: curl -L https://api.nest.saker.build/bundle/download/saker.build-v$(curl -s https://mirror.nest.saker.build/badges/saker.build/latest.txt) -o saker.build.jar
    displayName: 'Download saker.build'
    condition: and(succeeded(), or( eq( variables['Agent.OS'], 'Linux' ), eq( variables['Agent.OS'], 'Darwin' ) ))
  - script: powershell $ProgressPreference='silentlyContinue';Invoke-WebRequest "https://api.nest.saker.build/bundle/download/saker.build-v$((Invoke-WebRequest "https://mirror.nest.saker.build/badges/saker.build/latest.txt" -UseBasicParsing).Content)" -OutFile saker.build.jar
    displayName: 'Download saker.build'
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
  - script: java -jar ../saker.build.jar -bd build -trace pwd://build/build_install.trace install
    displayName: 'Install saker.windows'
    workingDirectory: saker.windows
  - script: java -jar ../saker.build.jar -bd build -trace pwd://build/build_install.trace install
    displayName: 'Install saker.msvc'
    workingDirectory: saker.msvc
  - script: java -jar ../saker.build.jar -bd build -trace pwd://build/build_install.trace install
    displayName: 'Install saker.android'
    workingDirectory: saker.android
  - script: |
      sed -i.bak '/Nest-ClassPath-Supported-Repository-Versions/d' saker.build
      java -jar ../saker.build.jar -bd build -trace pwd://build/build_install.trace install
    displayName: 'Install saker.apple'
    workingDirectory: saker.apple
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Darwin' ))
  
  - script: java -jar ../saker.build.jar -bd build -trace pwd://build/build_install.trace install sipka.rubyhunter/saker.build
    displayName: 'Install sipka.rubyhunter'
    workingDirectory: ruby-hunter
    
  - script: java -jar ../saker.build.jar -bd build -trace pwd://build/build_export.trace export_$(ci_target)
    displayName: 'Export $(ci_target)'
    workingDirectory: ruby-hunter
  - task: PublishBuildArtifacts@1
    condition: always()
    displayName: 'Publish export trace'
    inputs:
      pathtoPublish: build/build_export.trace
      artifactName: 'export_trace_$(imageName)_$(ci_target)'
  